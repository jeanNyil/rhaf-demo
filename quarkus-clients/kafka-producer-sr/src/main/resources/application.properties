## OCP deployment
quarkus.kubernetes-client.trust-certs=true
quarkus.openshift.env.configmaps=kafka-producer-config-sr

# dev config
quarkus.devservices.enabled=false
quarkus.http.port=8080


# Outbound
mp.messaging.outgoing.event-out.connector=smallrye-kafka
mp.messaging.outgoing.event-out.topic=event-sr
#mp.messaging.outgoing.event-out.key.serializer=org.apache.kafka.common.serialization.LongSerializer
#mp.messaging.outgoing.event-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer

mp.messaging.connector.smallrye-kafka.security.protocol=SASL_PLAINTEXT
mp.messaging.connector.smallrye-kafka.sasl.mechanism=SCRAM-SHA-512
mp.messaging.connector.smallrye-kafka.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username="quarkus-producer" password="HLt85Q9PdE9q";

# Ensure that message is written at least on one replica
mp.messaging.outgoing.event-out.acks=1
mp.messaging.outgoing.event-out.waitForWriteCompletion=true


mp.messaging.outgoing.event-out.key.serializer=org.apache.kafka.common.serialization.LongSerializer
#mp.messaging.outgoing.event-out.value.serializer=io.apicurio.registry.serde.avro.AvroKafkaSerializer

mp.messaging.connector.smallrye-kafka.apicurio.registry.url=http://apicurioregistry.apicurio.router-default.apps.cluster-dqx5g.dqx5g.sandbox2859.opentlc.com/apis/registry/v2
mp.messaging.outgoing.event-out.apicurio.registry.auto-register=true
#mp.messaging.outgoing.event-out.apicurio.registry.artifact-id=io.apicurio.registry.utils.serde.strategy.SimpleTopicIdStrategy
#mp.messaging.outgoing.event-out.apicurio.registry.global-id=io.apicurio.registry.utils.serde.strategy.GetOrCreateIdStrategy
