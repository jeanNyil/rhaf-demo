/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.redhat.demo.avro.schema;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Schema for a Message. */
@org.apache.avro.specific.AvroGenerated
public class Message extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -805788423880438145L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Message\",\"namespace\":\"com.redhat.demo.avro.schema\",\"doc\":\"Schema for a Message.\",\"fields\":[{\"name\":\"quantity\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Product quantity.\"},{\"name\":\"orderdate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Order date.\"},{\"name\":\"productid\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Product reference.\"},{\"name\":\"consumerid\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Consumer reference.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Message> ENCODER =
      new BinaryMessageEncoder<Message>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Message> DECODER =
      new BinaryMessageDecoder<Message>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Message> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Message> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Message> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Message>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Message to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Message from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Message instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Message fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Product quantity. */
  private java.lang.String quantity;
  /** Order date. */
  private java.lang.String orderdate;
  /** Product reference. */
  private java.lang.String productid;
  /** Consumer reference. */
  private java.lang.String consumerid;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Message() {}

  /**
   * All-args constructor.
   * @param quantity Product quantity.
   * @param orderdate Order date.
   * @param productid Product reference.
   * @param consumerid Consumer reference.
   */
  public Message(java.lang.String quantity, java.lang.String orderdate, java.lang.String productid, java.lang.String consumerid) {
    this.quantity = quantity;
    this.orderdate = orderdate;
    this.productid = productid;
    this.consumerid = consumerid;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return quantity;
    case 1: return orderdate;
    case 2: return productid;
    case 3: return consumerid;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: quantity = value$ != null ? value$.toString() : null; break;
    case 1: orderdate = value$ != null ? value$.toString() : null; break;
    case 2: productid = value$ != null ? value$.toString() : null; break;
    case 3: consumerid = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'quantity' field.
   * @return Product quantity.
   */
  public java.lang.String getQuantity() {
    return quantity;
  }


  /**
   * Sets the value of the 'quantity' field.
   * Product quantity.
   * @param value the value to set.
   */
  public void setQuantity(java.lang.String value) {
    this.quantity = value;
  }

  /**
   * Gets the value of the 'orderdate' field.
   * @return Order date.
   */
  public java.lang.String getOrderdate() {
    return orderdate;
  }


  /**
   * Sets the value of the 'orderdate' field.
   * Order date.
   * @param value the value to set.
   */
  public void setOrderdate(java.lang.String value) {
    this.orderdate = value;
  }

  /**
   * Gets the value of the 'productid' field.
   * @return Product reference.
   */
  public java.lang.String getProductid() {
    return productid;
  }


  /**
   * Sets the value of the 'productid' field.
   * Product reference.
   * @param value the value to set.
   */
  public void setProductid(java.lang.String value) {
    this.productid = value;
  }

  /**
   * Gets the value of the 'consumerid' field.
   * @return Consumer reference.
   */
  public java.lang.String getConsumerid() {
    return consumerid;
  }


  /**
   * Sets the value of the 'consumerid' field.
   * Consumer reference.
   * @param value the value to set.
   */
  public void setConsumerid(java.lang.String value) {
    this.consumerid = value;
  }

  /**
   * Creates a new Message RecordBuilder.
   * @return A new Message RecordBuilder
   */
  public static com.redhat.demo.avro.schema.Message.Builder newBuilder() {
    return new com.redhat.demo.avro.schema.Message.Builder();
  }

  /**
   * Creates a new Message RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Message RecordBuilder
   */
  public static com.redhat.demo.avro.schema.Message.Builder newBuilder(com.redhat.demo.avro.schema.Message.Builder other) {
    if (other == null) {
      return new com.redhat.demo.avro.schema.Message.Builder();
    } else {
      return new com.redhat.demo.avro.schema.Message.Builder(other);
    }
  }

  /**
   * Creates a new Message RecordBuilder by copying an existing Message instance.
   * @param other The existing instance to copy.
   * @return A new Message RecordBuilder
   */
  public static com.redhat.demo.avro.schema.Message.Builder newBuilder(com.redhat.demo.avro.schema.Message other) {
    if (other == null) {
      return new com.redhat.demo.avro.schema.Message.Builder();
    } else {
      return new com.redhat.demo.avro.schema.Message.Builder(other);
    }
  }

  /**
   * RecordBuilder for Message instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Message>
    implements org.apache.avro.data.RecordBuilder<Message> {

    /** Product quantity. */
    private java.lang.String quantity;
    /** Order date. */
    private java.lang.String orderdate;
    /** Product reference. */
    private java.lang.String productid;
    /** Consumer reference. */
    private java.lang.String consumerid;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.redhat.demo.avro.schema.Message.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.quantity)) {
        this.quantity = data().deepCopy(fields()[0].schema(), other.quantity);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.orderdate)) {
        this.orderdate = data().deepCopy(fields()[1].schema(), other.orderdate);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.productid)) {
        this.productid = data().deepCopy(fields()[2].schema(), other.productid);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.consumerid)) {
        this.consumerid = data().deepCopy(fields()[3].schema(), other.consumerid);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Message instance
     * @param other The existing instance to copy.
     */
    private Builder(com.redhat.demo.avro.schema.Message other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.quantity)) {
        this.quantity = data().deepCopy(fields()[0].schema(), other.quantity);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.orderdate)) {
        this.orderdate = data().deepCopy(fields()[1].schema(), other.orderdate);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.productid)) {
        this.productid = data().deepCopy(fields()[2].schema(), other.productid);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.consumerid)) {
        this.consumerid = data().deepCopy(fields()[3].schema(), other.consumerid);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'quantity' field.
      * Product quantity.
      * @return The value.
      */
    public java.lang.String getQuantity() {
      return quantity;
    }


    /**
      * Sets the value of the 'quantity' field.
      * Product quantity.
      * @param value The value of 'quantity'.
      * @return This builder.
      */
    public com.redhat.demo.avro.schema.Message.Builder setQuantity(java.lang.String value) {
      validate(fields()[0], value);
      this.quantity = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'quantity' field has been set.
      * Product quantity.
      * @return True if the 'quantity' field has been set, false otherwise.
      */
    public boolean hasQuantity() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'quantity' field.
      * Product quantity.
      * @return This builder.
      */
    public com.redhat.demo.avro.schema.Message.Builder clearQuantity() {
      quantity = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderdate' field.
      * Order date.
      * @return The value.
      */
    public java.lang.String getOrderdate() {
      return orderdate;
    }


    /**
      * Sets the value of the 'orderdate' field.
      * Order date.
      * @param value The value of 'orderdate'.
      * @return This builder.
      */
    public com.redhat.demo.avro.schema.Message.Builder setOrderdate(java.lang.String value) {
      validate(fields()[1], value);
      this.orderdate = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'orderdate' field has been set.
      * Order date.
      * @return True if the 'orderdate' field has been set, false otherwise.
      */
    public boolean hasOrderdate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'orderdate' field.
      * Order date.
      * @return This builder.
      */
    public com.redhat.demo.avro.schema.Message.Builder clearOrderdate() {
      orderdate = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'productid' field.
      * Product reference.
      * @return The value.
      */
    public java.lang.String getProductid() {
      return productid;
    }


    /**
      * Sets the value of the 'productid' field.
      * Product reference.
      * @param value The value of 'productid'.
      * @return This builder.
      */
    public com.redhat.demo.avro.schema.Message.Builder setProductid(java.lang.String value) {
      validate(fields()[2], value);
      this.productid = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'productid' field has been set.
      * Product reference.
      * @return True if the 'productid' field has been set, false otherwise.
      */
    public boolean hasProductid() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'productid' field.
      * Product reference.
      * @return This builder.
      */
    public com.redhat.demo.avro.schema.Message.Builder clearProductid() {
      productid = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'consumerid' field.
      * Consumer reference.
      * @return The value.
      */
    public java.lang.String getConsumerid() {
      return consumerid;
    }


    /**
      * Sets the value of the 'consumerid' field.
      * Consumer reference.
      * @param value The value of 'consumerid'.
      * @return This builder.
      */
    public com.redhat.demo.avro.schema.Message.Builder setConsumerid(java.lang.String value) {
      validate(fields()[3], value);
      this.consumerid = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'consumerid' field has been set.
      * Consumer reference.
      * @return True if the 'consumerid' field has been set, false otherwise.
      */
    public boolean hasConsumerid() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'consumerid' field.
      * Consumer reference.
      * @return This builder.
      */
    public com.redhat.demo.avro.schema.Message.Builder clearConsumerid() {
      consumerid = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Message build() {
      try {
        Message record = new Message();
        record.quantity = fieldSetFlags()[0] ? this.quantity : (java.lang.String) defaultValue(fields()[0]);
        record.orderdate = fieldSetFlags()[1] ? this.orderdate : (java.lang.String) defaultValue(fields()[1]);
        record.productid = fieldSetFlags()[2] ? this.productid : (java.lang.String) defaultValue(fields()[2]);
        record.consumerid = fieldSetFlags()[3] ? this.consumerid : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Message>
    WRITER$ = (org.apache.avro.io.DatumWriter<Message>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Message>
    READER$ = (org.apache.avro.io.DatumReader<Message>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.quantity);

    out.writeString(this.orderdate);

    out.writeString(this.productid);

    out.writeString(this.consumerid);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.quantity = in.readString();

      this.orderdate = in.readString();

      this.productid = in.readString();

      this.consumerid = in.readString();

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.quantity = in.readString();
          break;

        case 1:
          this.orderdate = in.readString();
          break;

        case 2:
          this.productid = in.readString();
          break;

        case 3:
          this.consumerid = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










